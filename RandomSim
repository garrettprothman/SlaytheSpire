import random
import copy

def clamp(value, min_value, max_value):
    return max(min_value, min(value, max_value))

class Card:
    def __init__(self, name, cost, damage=0, block=0):
        self.name = name
        self.cost = cost
        self.damage = damage
        self.block = block

class Player:
    def __init__(self):
        self.max_hp = 50
        self.hp = 50
        self.energy = 3
        self.block = 0
        self.deck = [Card("Strike", 1, damage=6) for _ in range(5)] + [Card("Defend", 1, block=5) for _ in range(5)]
        self.hand = []
        self.discard_pile = []
        self.draw_pile = copy.deepcopy(self.deck)
        random.shuffle(self.draw_pile)
        self.gold = 0

    def draw(self, num):
        for _ in range(num):
            if not self.draw_pile:
                self.draw_pile = self.discard_pile
                self.discard_pile = []
                random.shuffle(self.draw_pile)
            if self.draw_pile:
                self.hand.append(self.draw_pile.pop())

    def add_card_choice(self):
        possible_cards = [
            Card("Bash", 2, damage=8),
            Card("Iron Wave", 1, damage=5, block=5),
            Card("Clash", 0, damage=14)
        ]
        print("\nChoose a card to add to your deck:")
        for i, c in enumerate(possible_cards):
            print(f"{i}: {c.name} (Cost: {c.cost}, Dmg: {c.damage}, Block: {c.block})")
        choice = None
        while choice is None:
            sel = input("Enter card number: ").strip()
            if sel.isdigit() and int(sel) in range(len(possible_cards)):
                choice = possible_cards[int(sel)]
            else:
                print("Invalid choice.")
        self.deck.append(choice)
        self.discard_pile.append(choice)
        print(f"Added {choice.name} to your deck!")

class Enemy:
    def __init__(self, name, hp, intents):
        self.name = name
        self.hp = hp
        self.block = 0
        self.intents = intents
        self.intent = None

    def choose_intent(self):
        self.intent = random.choice(self.intents)

class Combat:
    def __init__(self, player, enemy):
        self.player = player
        self.enemy = enemy

    def player_play_phase(self, log):
        while self.player.energy > 0 and self.player.hand:
            print(f"\n{self.enemy.name} intends to: {self.enemy.intent['name']} (Damage: {self.enemy.intent['damage']}, Block: {self.enemy.intent['block']})")
            print("\nYour hand:")
            for i, card in enumerate(self.player.hand):
                print(f"{i}: {card.name} (Cost: {card.cost}, Dmg: {card.damage}, Block: {card.block})")
            print(f"Energy: {self.player.energy}")
            choice = input("Play card # or 'end' to end turn: ").strip().lower()
            if choice == 'end':
                break
            if not choice.isdigit() or int(choice) not in range(len(self.player.hand)):
                print("Invalid choice.")
                continue
            card = self.player.hand[int(choice)]
            if card.cost > self.player.energy:
                print("Not enough energy!")
                continue
            self.play_card(card, log)

    def play_card(self, card, log):
        self.player.energy -= card.cost
        if card.damage:
            dmg_done = max(0, card.damage - self.enemy.block)
            self.enemy.block = max(0, self.enemy.block - card.damage)
            self.enemy.hp -= dmg_done
            log(f"You use {card.name}, dealing {dmg_done} damage!")
        if card.block:
            self.player.block += card.block
            log(f"You gain {card.block} block!")
        self.player.hand.remove(card)
        self.player.discard_pile.append(card)

    def start(self, log):
        while self.player.hp > 0 and self.enemy.hp > 0:
            self.enemy.choose_intent()
            log(f"{self.enemy.name} intends to: {self.enemy.intent['name']} (Damage: {self.enemy.intent['damage']}, Block: {self.enemy.intent['block']})")

            self.player.energy = 3
            self.player.block = 0
            self.player.draw(5)

            self.player_play_phase(log)

            if self.enemy.hp <= 0:
                break

            dmg = self.enemy.intent['damage']
            blk = self.enemy.intent['block']
            if blk:
                self.enemy.block += blk
                log(f"{self.enemy.name} gains {blk} block!")
            if dmg:
                dmg_done = max(0, dmg - self.player.block)
                self.player.hp -= dmg_done
                log(f"{self.enemy.name} attacks for {dmg}, you take {dmg_done}!")

            self.player.hand.clear()
            self.player.block = 0
        return self.player.hp > 0

class Run:
    def __init__(self):
        self.player = Player()

    def log(self, msg):
        print(msg)

    def start(self):
        enemy = Enemy("Slime", 30, [
            {"name": "Tackle", "damage": 6, "block": 0},
            {"name": "Harden", "damage": 0, "block": 5}
        ])
        combat = Combat(self.player, enemy)
        win = combat.start(self.log)
        if win:
            print("You won!")
            self.player.add_card_choice()
        else:
            print("You were defeated!")

if __name__ == "__main__":
    Run().start()
